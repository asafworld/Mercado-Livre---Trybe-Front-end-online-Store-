{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' // [::1] is the IPv6 localhost address.\n|| window.location.hostname === '[::1]' // 127.0.0.0/8 are considered localhost for IPv4.\n|| window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  const NOT_FOUND = 404;\n  const NOT_FOUND_IN_ARRAY = -1; // Check if the service worker can be found. If it can't reload the page.\n\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === NOT_FOUND || contentType != null && contentType.indexOf('javascript') === NOT_FOUND_IN_ARRAY) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","NOT_FOUND","NOT_FOUND_IN_ARRAY","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","message"],"sources":["/media/asaf/SD/Trybe/Projetos/projetos-publicados/Mercado-Livre---Trybe-Front-end-online-Store-/src/serviceWorker.js"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  const NOT_FOUND = 404;\n  const NOT_FOUND_IN_ARRAY = -1;\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === NOT_FOUND\n        || (contentType != null\n          && contentType.indexOf('javascript') === NOT_FOUND_IN_ARRAY)) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}